
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\007\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\007\004\000\002\007\002" +
    "\000\002\006\014\000\002\006\014\000\002\011\004\000" +
    "\002\011\002\000\002\010\007\000\002\010\006\000\002" +
    "\010\010\000\002\003\004\000\002\003\002\000\002\004" +
    "\010\000\002\004\007\000\002\004\006\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\006\000" +
    "\002\004\007\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\007\000\002\026" +
    "\003\000\002\026\002\000\002\025\003\000\002\025\003" +
    "\000\002\022\004\000\002\022\006\000\002\023\003\000" +
    "\002\023\002\000\002\024\005\000\002\024\003\000\002" +
    "\012\004\000\002\012\002\000\002\021\005\000\002\021" +
    "\003\000\002\020\005\000\002\020\003\000\002\017\003" +
    "\000\002\017\002\000\002\016\005\000\002\016\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\013\003\000\002\013\006\000\002\014" +
    "\005\000\002\014\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\005\000" +
    "\002\027\006\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\005\000\002\027\004\000\002\027\004\000\002\027\004" +
    "\000\002\027\006\000\002\027\011\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\004\005\001\002\000\004\002\300\001" +
    "\002\000\004\062\006\001\002\000\004\033\007\001\002" +
    "\000\020\016\020\034\ufffc\051\016\054\010\055\021\056" +
    "\012\057\022\001\002\000\006\030\uffd1\062\uffd1\001\002" +
    "\000\016\034\ufffc\051\016\054\010\055\021\056\012\057" +
    "\022\001\002\000\006\030\uffcf\062\uffcf\001\002\000\004" +
    "\034\274\001\002\000\020\016\020\034\ufffc\051\016\054" +
    "\010\055\021\056\012\057\022\001\002\000\004\034\ufffe" +
    "\001\002\000\004\062\262\001\002\000\004\062\126\001" +
    "\002\000\012\054\010\055\021\056\012\057\022\001\002" +
    "\000\006\030\uffd0\062\uffd0\001\002\000\006\030\uffce\062" +
    "\uffce\001\002\000\004\062\024\001\002\000\006\013\uffda" +
    "\014\025\001\002\000\030\010\040\011\032\027\042\045" +
    "\030\052\031\053\034\060\044\061\043\062\041\063\036" +
    "\064\037\001\002\000\004\013\027\001\002\000\040\005" +
    "\ufff7\006\ufff7\016\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\033\ufff7\034\ufff7\051\ufff7\054\ufff7\055\ufff7\056\ufff7\057" +
    "\ufff7\062\ufff7\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\046\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\025\uffc0\026\uffc0\030\uffc0\032\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\001\002\000\030\010\040\011\032\027" +
    "\042\045\030\052\031\053\034\060\044\061\043\062\041" +
    "\063\036\064\037\001\002\000\046\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\025\uffc6\026\uffc6\030\uffc6\032\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\001\002\000\046\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\025\uffbf\026\uffbf\030\uffbf\032" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\001\002\000\046\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\025\uffc8\026\uffc8\030\uffc8" +
    "\032\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000\046\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\025\uffc3\026\uffc3\030" +
    "\uffc3\032\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000\046\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\025\uffc7\026\uffc7" +
    "\030\uffc7\032\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000\030" +
    "\010\040\011\032\027\042\045\030\052\031\053\034\060" +
    "\044\061\043\062\041\063\036\064\037\001\002\000\052" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\025\uffcd\026" +
    "\uffcd\027\111\030\uffcd\031\112\032\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\001\002\000\040\010\040\011\032\027\042\045\030" +
    "\052\031\053\034\054\010\055\021\056\012\057\022\060" +
    "\044\061\043\062\041\063\036\064\037\001\002\000\046" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\025\uffc1\026" +
    "\uffc1\030\uffc1\032\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000" +
    "\046\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\025\uffc2" +
    "\026\uffc2\030\uffc2\032\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\001\002" +
    "\000\034\007\061\010\057\011\047\012\052\013\uffdb\025" +
    "\055\026\056\037\051\040\062\041\060\042\054\043\050" +
    "\044\053\001\002\000\046\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\025\uffc9\026\uffc9\030\uffc9\032\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\030\010\040\011\032\027\042" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\046\007\061\010\057\011\047" +
    "\012\052\013\uffb3\025\uffb3\026\uffb3\030\uffb3\032\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\001\002\000\046\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\025\uffb6\026\uffb6\030\uffb6\032\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\001\002\000\046\007\061\010\057" +
    "\011\047\012\052\013\uffb2\025\uffb2\026\uffb2\030\uffb2\032" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\001\002\000\046\007\061\010" +
    "\uffb8\011\uffb8\012\052\013\uffb8\025\uffb8\026\uffb8\030\uffb8" +
    "\032\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\001\002\000\046\007\061" +
    "\010\057\011\047\012\052\013\uffad\025\uffad\026\uffad\030" +
    "\uffad\032\uffad\037\051\040\062\041\060\042\054\043\050" +
    "\044\053\046\uffad\047\uffad\050\uffad\001\002\000\046\007" +
    "\061\010\057\011\047\012\052\013\uffae\025\uffae\026\056" +
    "\030\uffae\032\uffae\037\051\040\062\041\060\042\054\043" +
    "\050\044\053\046\uffae\047\uffae\050\uffae\001\002\000\046" +
    "\007\061\010\057\011\047\012\052\013\uffb1\025\uffb1\026" +
    "\uffb1\030\uffb1\032\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\001\002\000" +
    "\046\007\061\010\057\011\047\012\052\013\uffaf\025\uffaf" +
    "\026\uffaf\030\uffaf\032\uffaf\037\uffaf\040\062\041\060\042" +
    "\054\043\050\044\uffaf\046\uffaf\047\uffaf\050\uffaf\001\002" +
    "\000\046\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\025" +
    "\uffb5\026\uffb5\030\uffb5\032\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\050\uffb5\001" +
    "\002\000\046\007\061\010\057\011\047\012\052\013\uffb4" +
    "\025\uffb4\026\uffb4\030\uffb4\032\uffb4\037\uffb4\040\062\041" +
    "\060\042\054\043\050\044\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\001\002\000\046\007\061\010\057\011\047\012\052\013" +
    "\uffb0\025\uffb0\026\uffb0\030\uffb0\032\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\001\002\000\046\007\061\010\uffb7\011\uffb7\012\052" +
    "\013\uffb7\025\uffb7\026\uffb7\030\uffb7\032\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\001\002\000\036\007\061\010\057\011\047\012" +
    "\052\025\055\026\056\030\104\037\051\040\062\041\060" +
    "\042\054\043\050\044\053\046\103\001\002\000\004\030" +
    "\101\001\002\000\030\010\040\011\032\027\042\045\030" +
    "\052\031\053\034\060\044\061\043\062\041\063\036\064" +
    "\037\001\002\000\046\007\061\010\057\011\047\012\052" +
    "\013\uffba\025\055\026\056\030\uffba\032\uffba\037\051\040" +
    "\062\041\060\042\054\043\050\044\053\046\uffba\047\uffba" +
    "\050\uffba\001\002\000\030\010\040\011\032\027\042\045" +
    "\030\052\031\053\034\060\044\061\043\062\041\063\036" +
    "\064\037\001\002\000\046\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\025\uffbe\026\uffbe\030\uffbe\032\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\001\002\000\034\007\061\010\057\011\047" +
    "\012\052\025\055\026\056\037\051\040\062\041\060\042" +
    "\054\043\050\044\053\047\106\001\002\000\030\010\040" +
    "\011\032\027\042\045\030\052\031\053\034\060\044\061" +
    "\043\062\041\063\036\064\037\001\002\000\034\007\061" +
    "\010\057\011\047\012\052\025\055\026\056\030\110\037" +
    "\051\040\062\041\060\042\054\043\050\044\053\001\002" +
    "\000\046\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\025" +
    "\uffb9\026\uffb9\030\uffb9\032\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\001" +
    "\002\000\032\010\040\011\032\027\042\030\116\045\030" +
    "\052\031\053\034\060\044\061\043\062\041\063\036\064" +
    "\037\001\002\000\030\010\040\011\032\027\042\045\030" +
    "\052\031\053\034\060\044\061\043\062\041\063\036\064" +
    "\037\001\002\000\034\007\061\010\057\011\047\012\052" +
    "\025\055\026\056\032\114\037\051\040\062\041\060\042" +
    "\054\043\050\044\053\001\002\000\054\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\025\uffcc\026\uffcc\030" +
    "\uffcc\032\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\001" +
    "\002\000\004\030\122\001\002\000\046\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\025\uffc5\026\uffc5\030\uffc5\032" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\001\002\000\036\007\061\010" +
    "\057\011\047\012\052\025\055\026\056\030\uffca\037\051" +
    "\040\062\041\060\042\054\043\050\044\053\050\120\001" +
    "\002\000\030\010\040\011\032\027\042\045\030\052\031" +
    "\053\034\060\044\061\043\062\041\063\036\064\037\001" +
    "\002\000\004\030\uffcb\001\002\000\046\007\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\025\uffc4\026\uffc4\030\uffc4\032" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\001\002\000\046\007\061\010" +
    "\uffbc\011\uffbc\012\052\013\uffbc\025\uffbc\026\uffbc\030\uffbc" +
    "\032\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\001\002\000\046\007\061" +
    "\010\uffbb\011\uffbb\012\052\013\uffbb\025\uffbb\026\uffbb\030" +
    "\uffbb\032\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\046\uffbb\047\uffbb\050\uffbb\001\002\000\046\007" +
    "\061\010\057\011\047\012\052\013\uffbd\025\055\026\056" +
    "\030\uffbd\032\uffbd\037\051\040\062\041\060\042\054\043" +
    "\050\044\053\046\uffbd\047\uffbd\050\uffbd\001\002\000\012" +
    "\013\uffda\014\025\027\127\031\131\001\002\000\014\030" +
    "\uffde\054\010\055\021\056\012\057\022\001\002\000\004" +
    "\013\135\001\002\000\004\064\132\001\002\000\004\032" +
    "\133\001\002\000\004\013\134\001\002\000\040\005\ufff5" +
    "\006\ufff5\016\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\033" +
    "\ufff5\034\ufff5\051\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\062\ufff5\001\002\000\040\005\ufff6\006\ufff6\016\ufff6\020" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\033\ufff6\034\ufff6\051\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\062\ufff6\001\002\000" +
    "\006\030\uffdc\050\260\001\002\000\004\030\uffdf\001\002" +
    "\000\004\062\255\001\002\000\004\030\142\001\002\000" +
    "\004\033\143\001\002\000\036\005\ufff8\006\ufff8\016\020" +
    "\020\ufff8\022\ufff8\023\ufff8\024\ufff8\033\ufff8\034\ufff8\054" +
    "\010\055\021\056\012\057\022\062\ufff8\001\002\000\036" +
    "\005\ufff8\006\ufff8\016\020\020\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\033\ufff8\034\ufff8\054\010\055\021\056\012\057\022" +
    "\062\ufff8\001\002\000\004\062\253\001\002\000\024\005" +
    "\147\006\157\020\155\022\150\023\153\024\160\033\161" +
    "\034\ufff3\062\156\001\002\000\004\027\243\001\002\000" +
    "\004\027\237\001\002\000\010\014\230\035\232\036\231" +
    "\001\002\000\024\005\147\006\157\020\155\022\150\023" +
    "\153\024\160\033\161\034\ufff3\062\156\001\002\000\004" +
    "\027\222\001\002\000\004\034\220\001\002\000\004\027" +
    "\207\001\002\000\014\014\uffcd\027\201\031\112\035\uffcd" +
    "\036\uffcd\001\002\000\004\027\172\001\002\000\032\010" +
    "\040\011\032\013\167\027\042\045\030\052\031\053\034" +
    "\060\044\061\043\062\041\063\036\064\037\001\002\000" +
    "\036\005\ufff8\006\ufff8\016\020\020\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\033\ufff8\034\ufff8\054\010\055\021\056\012\057" +
    "\022\062\ufff8\001\002\000\024\005\147\006\157\020\155" +
    "\022\150\023\153\024\160\033\161\034\ufff3\062\156\001" +
    "\002\000\004\034\164\001\002\000\032\005\uffe4\006\uffe4" +
    "\013\166\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\033\uffe4\034\uffe4\062\uffe4\001\002\000\030\005\uffe6" +
    "\006\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\033\uffe6\034\uffe6\062\uffe6\001\002\000\042\005\uffe5" +
    "\006\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\033\uffe5\034\uffe5\051\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\062\uffe5\001\002\000\030\005\uffea\006\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\033\uffea" +
    "\034\uffea\062\uffea\001\002\000\034\007\061\010\057\011" +
    "\047\012\052\013\171\025\055\026\056\037\051\040\062" +
    "\041\060\042\054\043\050\044\053\001\002\000\030\005" +
    "\uffe9\006\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\033\uffe9\034\uffe9\062\uffe9\001\002\000\030\010" +
    "\040\011\032\027\042\045\030\052\031\053\034\060\044" +
    "\061\043\062\041\063\036\064\037\001\002\000\004\030" +
    "\177\001\002\000\036\007\061\010\057\011\047\012\052" +
    "\025\055\026\056\030\uffd2\037\051\040\062\041\060\042" +
    "\054\043\050\044\053\050\175\001\002\000\030\010\040" +
    "\011\032\027\042\045\030\052\031\053\034\060\044\061" +
    "\043\062\041\063\036\064\037\001\002\000\004\030\uffd3" +
    "\001\002\000\004\013\200\001\002\000\030\005\uffee\006" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\033\uffee\034\uffee\062\uffee\001\002\000\032\010\040\011" +
    "\032\027\042\030\203\045\030\052\031\053\034\060\044" +
    "\061\043\062\041\063\036\064\037\001\002\000\004\030" +
    "\205\001\002\000\004\013\204\001\002\000\030\005\uffec" +
    "\006\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\033\uffec\034\uffec\062\uffec\001\002\000\004\013\206" +
    "\001\002\000\030\005\uffeb\006\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\033\uffeb\034\uffeb\062\uffeb" +
    "\001\002\000\030\010\040\011\032\027\042\045\030\052" +
    "\031\053\034\060\044\061\043\062\041\063\036\064\037" +
    "\001\002\000\034\007\061\010\057\011\047\012\052\025" +
    "\055\026\056\030\211\037\051\040\062\041\060\042\054" +
    "\043\050\044\053\001\002\000\022\005\147\006\157\020" +
    "\155\022\150\023\153\024\160\033\161\062\156\001\002" +
    "\000\006\017\215\021\213\001\002\000\030\005\uffd8\006" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\033\uffd8\034\uffd8\062\uffd8\001\002\000\030\005\ufff2\006" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\033\ufff2\034\ufff2\062\ufff2\001\002\000\022\005\147\006" +
    "\157\020\155\022\150\023\153\024\160\033\161\062\156" +
    "\001\002\000\004\021\217\001\002\000\030\005\uffd9\006" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\033\uffd9\034\uffd9\062\uffd9\001\002\000\020\013\166\034" +
    "\uffe4\051\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\001\002" +
    "\000\016\034\ufffa\051\ufffa\054\ufffa\055\ufffa\056\ufffa\057" +
    "\ufffa\001\002\000\032\010\040\011\032\027\042\030\uffd4" +
    "\045\030\052\031\053\034\060\044\061\043\062\041\063" +
    "\036\064\037\001\002\000\004\030\uffd5\001\002\000\004" +
    "\030\225\001\002\000\004\013\226\001\002\000\030\005" +
    "\uffed\006\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\033\uffed\034\uffed\062\uffed\001\002\000\004\034" +
    "\ufff4\001\002\000\030\010\040\011\032\027\042\045\030" +
    "\052\031\053\034\060\044\061\043\062\041\063\036\064" +
    "\037\001\002\000\004\013\234\001\002\000\004\013\233" +
    "\001\002\000\030\005\uffe8\006\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\033\uffe8\034\uffe8\062\uffe8" +
    "\001\002\000\030\005\uffe7\006\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\033\uffe7\034\uffe7\062\uffe7" +
    "\001\002\000\034\007\061\010\057\011\047\012\052\013" +
    "\236\025\055\026\056\037\051\040\062\041\060\042\054" +
    "\043\050\044\053\001\002\000\030\005\ufff0\006\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\033\ufff0" +
    "\034\ufff0\062\ufff0\001\002\000\030\010\040\011\032\027" +
    "\042\045\030\052\031\053\034\060\044\061\043\062\041" +
    "\063\036\064\037\001\002\000\034\007\061\010\057\011" +
    "\047\012\052\025\055\026\056\030\241\037\051\040\062" +
    "\041\060\042\054\043\050\044\053\001\002\000\022\005" +
    "\147\006\157\020\155\022\150\023\153\024\160\033\161" +
    "\062\156\001\002\000\030\005\ufff1\006\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\033\ufff1\034\ufff1" +
    "\062\ufff1\001\002\000\004\062\244\001\002\000\010\030" +
    "\uffcd\031\112\050\uffcd\001\002\000\006\030\uffd6\050\251" +
    "\001\002\000\004\030\247\001\002\000\004\013\250\001" +
    "\002\000\030\005\uffef\006\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\033\uffef\034\uffef\062\uffef\001" +
    "\002\000\004\062\244\001\002\000\004\030\uffd7\001\002" +
    "\000\010\013\uffda\014\025\031\131\001\002\000\024\005" +
    "\ufff9\006\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\033\ufff9" +
    "\034\ufff9\062\ufff9\001\002\000\010\030\uffe1\031\256\050" +
    "\uffe1\001\002\000\004\032\257\001\002\000\006\030\uffe0" +
    "\050\uffe0\001\002\000\012\054\010\055\021\056\012\057" +
    "\022\001\002\000\004\030\uffdd\001\002\000\004\027\263" +
    "\001\002\000\014\030\uffde\054\010\055\021\056\012\057" +
    "\022\001\002\000\004\030\265\001\002\000\004\033\266" +
    "\001\002\000\036\005\ufff8\006\ufff8\016\020\020\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\033\ufff8\034\ufff8\054\010\055\021" +
    "\056\012\057\022\062\ufff8\001\002\000\024\005\147\006" +
    "\157\020\155\022\150\023\153\024\160\033\161\034\ufff3" +
    "\062\156\001\002\000\004\034\271\001\002\000\020\013" +
    "\166\034\uffe4\051\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\001\002\000\016\034\ufffb\051\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\001\002\000\004\034\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\034\ufffd\001\002\000\004\062" +
    "\277\001\002\000\004\027\127\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\012\006\010" +
    "\007\014\010\013\015\016\001\001\000\002\001\001\000" +
    "\010\006\010\007\274\015\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\272\006\010\007\014\010" +
    "\013\015\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\025" +
    "\001\001\000\012\013\032\027\044\030\045\031\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\032" +
    "\027\124\030\045\031\034\001\001\000\002\001\001\000" +
    "\012\013\032\027\123\030\045\031\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\032\027\122\030\045" +
    "\031\034\001\001\000\002\001\001\000\014\013\032\015" +
    "\077\027\076\030\045\031\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\032\027\075\030\045\031\034\001\001\000\012" +
    "\013\032\027\074\030\045\031\034\001\001\000\012\013" +
    "\032\027\073\030\045\031\034\001\001\000\012\013\032" +
    "\027\072\030\045\031\034\001\001\000\012\013\032\027" +
    "\071\030\045\031\034\001\001\000\012\013\032\027\070" +
    "\030\045\031\034\001\001\000\012\013\032\027\067\030" +
    "\045\031\034\001\001\000\012\013\032\027\066\030\045" +
    "\031\034\001\001\000\012\013\032\027\065\030\045\031" +
    "\034\001\001\000\012\013\032\027\064\030\045\031\034" +
    "\001\001\000\012\013\032\027\063\030\045\031\034\001" +
    "\001\000\012\013\032\027\062\030\045\031\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\032\027\101\030\045\031" +
    "\034\001\001\000\002\001\001\000\012\013\032\027\104" +
    "\030\045\031\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\032\027\106\030\045\031\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\013\032\014" +
    "\114\027\116\030\045\031\034\001\001\000\012\013\032" +
    "\027\112\030\045\031\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\032\014\120\027\116\030\045\031" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\127\001\001\000\012\015\137\022\135\023\140\024\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\143\011\145" +
    "\015\144\001\001\000\010\010\143\011\253\015\144\001" +
    "\001\000\002\001\001\000\010\003\153\004\151\013\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\226\004\151\013\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\032\027\167\030\045" +
    "\031\034\001\001\000\010\010\143\011\161\015\144\001" +
    "\001\000\010\003\162\004\151\013\150\001\001\000\002" +
    "\001\001\000\004\026\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\032\016\172\027\173\030\045\031" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\032\016\175\027\173\030\045\031\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\032\014\201\027\116\030\045\031\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\032\027\207\030" +
    "\045\031\034\001\001\000\002\001\001\000\006\004\211" +
    "\013\150\001\001\000\004\021\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\215\013\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\220\001" +
    "\001\000\002\001\001\000\016\013\032\016\222\017\223" +
    "\027\173\030\045\031\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\032\027\234\030\045\031\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\032\027\237\030\045\031\034\001\001\000\002" +
    "\001\001\000\006\004\241\013\150\001\001\000\002\001" +
    "\001\000\006\013\244\020\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\244\020\251\001\001\000\002" +
    "\001\001\000\004\012\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\137\022\135\024\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\137\022\135\023\263\024\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\143\011\266\015\144\001\001\000\010\003\267\004\151" +
    "\013\150\001\001\000\002\001\001\000\004\026\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID OBRACE memberdecls CBRACE 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls m = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(i, m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecl memberdecls 
            {
              Memberdecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Memberdecls ms = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(f, ms); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              Memberdecls RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls m = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // methoddecls ::= methoddecl methoddecls 
            {
              Methoddecls RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl m = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls ms = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecls(m, ms); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // methoddecls ::= 
            {
              Methoddecls RESULT =null;
		 RESULT = new Methoddecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecl ::= VOID ID OPARENTH argdecls CPARENTH OBRACE fielddecls stmtList CBRACE optionalsemi 
            {
              Methoddecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls a = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi o = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl("void",i,a,fs,s,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecl ::= type ID OPARENTH argdecls CPARENTH OBRACE fielddecls stmtList CBRACE optionalsemi 
            {
              Methoddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls a = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi o = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(t,i,a,fs,s,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fielddecls ::= fielddecl fielddecls 
            {
              Fielddecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Fielddecls(f, fs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fielddecls ::= 
            {
              Fielddecls RESULT =null;
		 RESULT = new Fielddecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fielddecl ::= FINAL type ID optionalAsn SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OptionalAsn oa = (OptionalAsn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(true,t,i,oa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fielddecl ::= type ID optionalAsn SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OptionalAsn oa = (OptionalAsn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(false,t,i,oa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fielddecl ::= type ID OBRACKET INTLIT CBRACKET SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int l = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Fielddecl(t, i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmtList ::= stmt stmtList 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtList(s, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmtList ::= 
            {
              StmtList RESULT =null;
		 RESULT = new StmtList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= IF OPARENTH expr CPARENTH stmt ifEnd 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfEnd i = (IfEnd)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(e, s, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= WHILE OPARENTH expr CPARENTH stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= name EQ expr SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(n, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= READ OPARENTH readlist CPARENTH SEMI 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Readlist r = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= PRINT OPARENTH printlist CPARENTH SEMI 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= PRINTLN OPARENTH printlinelist CPARENTH SEMI 
            {
              Stmt RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlinelist pl = (Printlinelist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= ID OPARENTH CPARENTH SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Stmt(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= ID OPARENTH args CPARENTH SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new Stmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= name INCREMENT SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(n, "++"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= name DECREMENT SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(n, "--"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= OBRACE fielddecls stmtList CBRACE optionalsemi 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi op = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(fs, s, op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // optionalsemi ::= SEMI 
            {
              Optionalsemi RESULT =null;
		 RESULT = new Optionalsemi(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // optionalsemi ::= 
            {
              Optionalsemi RESULT =null;
		 RESULT = new Optionalsemi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // returntype ::= type 
            {
              Returntype RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Returntype(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returntype",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // returntype ::= VOID 
            {
              Returntype RESULT =null;
		 RESULT = new Returntype(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returntype",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // argdecl ::= type ID 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecl(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // argdecl ::= type ID OBRACKET CBRACKET 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Argdecl(t, i, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // argdecls ::= argdeclList 
            {
              Argdecls RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList a = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecls(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // argdecls ::= 
            {
              Argdecls RESULT =null;
		 RESULT = new Argdecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argdeclList ::= argdecl COMMA argdeclList 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList al = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgdeclList(a, al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdeclList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // argdeclList ::= argdecl 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgdeclList(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdeclList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // optionalAsn ::= EQ expr 
            {
              OptionalAsn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OptionalAsn(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalAsn",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // optionalAsn ::= 
            {
              OptionalAsn RESULT =null;
		 RESULT = new OptionalAsn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalAsn",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifEnd ::= ELSE stmt FI 
            {
              IfEnd RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfEnd(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifEnd",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifEnd ::= FI 
            {
              IfEnd RESULT =null;
		 RESULT = new IfEnd(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifEnd",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // readlist ::= name COMMA readlist 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Readlist r = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Readlist(n, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // readlist ::= name 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Readlist(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // printlinelist ::= printlist 
            {
              Printlinelist RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlinelist(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // printlinelist ::= 
            {
              Printlinelist RESULT =null;
		 RESULT = new Printlinelist(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // printlist ::= expr COMMA printlist 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlist(e, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // printlist ::= expr 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlist(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= FLOAT 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= BOOL 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type("bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= CHAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type("char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // name ::= ID 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Name(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // name ::= ID OBRACKET expr CBRACKET 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Name(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // args ::= expr COMMA args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // args ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= binaryOp 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinaryOp b = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= booleanOp 
            {
              Expr RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BooleanOp bo = (BooleanOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(bo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= ID OPARENTH CPARENTH 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Expr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= ID OPARENTH args CPARENTH 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= STR 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(s, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float f = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= TRU 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= FLS 
            {
              Expr RESULT =null;
		int flsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= OPARENTH expr CPARENTH 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= SIMILAR expr 
            {
              Expr RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr("~", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= PLUS expr 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr("+", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr("-", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= OPARENTH type CPARENTH expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= OPARENTH expr QUESTION expr COLON expr CPARENTH 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binaryOp ::= expr PLUS expr 
            {
              BinaryOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(lhs, "+", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binaryOp ::= expr MINUS expr 
            {
              BinaryOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(lhs, "-", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binaryOp ::= expr TIMES expr 
            {
              BinaryOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(lhs, "*", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binaryOp ::= expr DIVIDE expr 
            {
              BinaryOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(lhs, "/", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // booleanOp ::= expr EQEQ expr 
            {
              BooleanOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanOp(lhs, "==", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // booleanOp ::= expr LESSTHAN expr 
            {
              BooleanOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanOp(lhs, "<", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // booleanOp ::= expr GREATERTHAN expr 
            {
              BooleanOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanOp(lhs, ">", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // booleanOp ::= expr LEQUALTO expr 
            {
              BooleanOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanOp(lhs, "<=", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // booleanOp ::= expr GEQUALTO expr 
            {
              BooleanOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanOp(lhs, ">=", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // booleanOp ::= expr LESSGREAT expr 
            {
              BooleanOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanOp(lhs, "<>", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // booleanOp ::= expr OROR expr 
            {
              BooleanOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanOp(lhs, "||", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // booleanOp ::= expr ANDAND expr 
            {
              BooleanOp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanOp(lhs, "&&", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
